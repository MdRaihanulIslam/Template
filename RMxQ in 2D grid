/** Bismillah Hir Rahman Nir Raheem **/
#include<bits/stdc++.h>
#define   Raihan          ios::sync_with_stdio(false);cin.tie(0);
#define   ll              long long int
#define   ull             unsigned long long int
#define   tst             int t;cin>>t;while(t--)
#define   pb              push_back
#define   vc              vector
#define   vs              vc<string>
#define   vi              vc<int>
#define   vl              vc<ll>
#define   pii             pair<int,int>
#define   pll             pair<ll,ll>
#define   F               first
#define   S               second
#define   PI              2*acos(0.0)
#define   rsrt(v)         sort(v.rbegin(),v.rend());
#define   all(v)          v.begin(),v.end()
#define   pf(x)           cout<<x<<endl;
#define   yes             cout<<"YES"<<endl;
#define   no              cout<<"NO"<<endl;
#define   ms(x,n)         memset(x,n,sizeof(x));
#define   srt(v)          sort(v.begin(),v.end());
#define   rvs(v)          reverse(v.begin(),v.end());
#define   gcd(a,b)        __gcd(a,b)
#define   lcm(a,b)        (a/gcd(a,b))*b
#define   coutv(v)        for(auto it:v)cout<<it<<' ';cout<<endl;
#define   cinv(v)         for(auto &it:v)cin>>it;
#define   mod             1000000007
const int N = 500+10;
using namespace std;
/*
const int fx[] = {+1,-1,+0,+0};
const int fy[] = {+0,+0,+1,-1};
const int fx[] = {+0,+0,+1,-1,-1,+1,-1,+1};
const int fy[] = {-1,+1,+0,+0,+1,+1,-1,-1};
const int fx[] = {-2,-2,-1,-1,+1,+1,+2,+2};
const int fy[] = {-1,+1,-2,+2,-2,+2,-1,+1};
*/
const int k = 11;
ll Log[N],grid[N][N],table[N][N][k][k],q;
void PreLog(int row,int col)
{
    Log[1] = 0;
    for(int i=2 ; i<=max(row , col) ; i++)
        Log[i] = Log[i/2]+1;
}

void SpTable(int row,int col)
{
    for(int kx=0 ; (1<<kx) <= col ; kx++){      ///kx is the length from upper left
        for(int ky=0 ; (1<<ky) <= row ; ky++){  ///ky is the width from upper left
            for(int x=1 ; x<=row ; x++){
                for(int y=1 ; y<=col ; y++){
                    if(kx==0 && ky==0)  ///IF its a 1*1 grid
                        table[x][y][kx][ky] = grid[x][y];
                    else if(kx == 0)    ///IF its length is 1
                        table[x][y][kx][ky] = max(table[x][y][kx][ky-1] , table[x][y+(1<<(ky-1))][kx][ky-1]);
                    else if(ky == 0)    ///IF its width is 1
                        table[x][y][kx][ky] = max(table[x][y][kx-1][ky] , table[x+(1<<(kx-1))][y][kx-1][ky]);
                    else
                        table[x][y][kx][ky] = max(table[x][y][kx-1][ky] , max(table[x+(1<<(kx-1))][y][kx-1][ky] , max(table[x][y][kx][ky-1] , table[x][y+(1<<(ky-1))][kx][ky-1])));
                }
            }
        }
    }
}

int RMxQ(int x1,int y1,int x2,int y2)
{
    int xlog = Log[x2-x1+1];
    int ylog = Log[y2-y1+1];
    int ret = max(table[x1][y1][xlog][ylog] , max(table[x2-(1<<xlog)+1][y1][xlog][ylog] , max(table[x1][y2-(1<<ylog)+1][xlog][ylog] , table[x2-(1<<xlog)+1][y2-(1<<ylog)+1][xlog][ylog])));
    return ret;
}

int main()
{
    Raihan
    //tst
    {
        ll row,col;
        cin>>row>>col;
        for(int i=1;i<=row;i++)
        {
            for(int j=1;j<=col;j++)
            {
                cin>>grid[i][j];
            }
        }
        PreLog(row,col);
        SpTable(row,col);
        cin>>q;
        while(q--)
        {
            ll x1,y1,x2,y2;
            cin>>x1>>y1>>x2>>y2;
            ll ans = RMxQ(x1,y1,x2,y2);
            cout<<ans<<endl;
        }
    }

    return 0;
}
