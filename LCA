/** Bismillah Hir Rahman Nir Raheem **/
#include<bits/stdc++.h>
#define   Raihan          ios::sync_with_stdio(false);cin.tie(0);
#define   ll              long long int
#define   ull             unsigned long long int
#define   tst             int t;cin>>t;while(t--)
#define   pb              push_back
#define   vc              vector
#define   vs              vc<string>
#define   vi              vc<int>
#define   vl              vc<ll>
#define   pii             pair<int,int>
#define   pll             pair<ll,ll>
#define   F               first
#define   S               second
#define   PI              2*acos(0.0)
#define   rsrt(v)         sort(v.rbegin(),v.rend());
#define   all(v)          v.begin(),v.end()
#define   pf(x)           cout<<x<<endl;
#define   yes             cout<<"YES"<<endl;
#define   no              cout<<"NO"<<endl;
#define   ms(x,n)         memset(x,n,sizeof(x));
#define   srt(v)          sort(v.begin(),v.end());
#define   rvs(v)          reverse(v.begin(),v.end());
#define   gcd(a,b)        __gcd(a,b)
#define   lcm(a,b)        (a/gcd(a,b))*b
#define   coutv(v)        for(auto it:v)cout<<it<<' ';cout<<endl;
#define   cinv(v)         for(auto &it:v)cin>>it;
#define   mod             1000000007
const int N = 1e5+10;
using namespace std;
/*
const int fx[] = {+1,-1,+0,+0};
const int fy[] = {+0,+0,+1,-1};
const int fx[] = {+0,+0,+1,-1,-1,+1,-1,+1};
const int fy[] = {-1,+1,+0,+0,+1,+1,-1,-1};
const int fx[] = {-2,-2,-1,-1,+1,+1,+2,+2};
const int fy[] = {-1,+1,-2,+2,-2,+2,-1,+1};
*/
const int k = 25;
ll level[N],parent[N],table[N][k],n,m,q;
bool vis[N];
vl adj[N];
void Bfs(ll start)
{
    memset(parent,-1,sizeof(parent));
    memset(level,0,sizeof(parent));
    memset(vis,0,sizeof(vis));
    queue<ll>q;
    vis[start] = 1;
    level[start] = 0;
    q.push(start);
    while(!q.empty())
    {
        ll node = q.front();
        q.pop();
        for(auto child:adj[node])
        {
            if(!vis[child])
            {
                vis[child] = 1;
                parent[child] = node;
                level[child] = 1+level[node];
                q.push(child);
            }
        }
    }
}

void LcaInit(int n)
{
    memset(table,-1,sizeof(table));
    for(int i=1 ; i<=n ; i++)
        table[i][0] = parent[i];
    for(int j=1 ; (1<<j)<=n ; j++)
    {
        for(int i=1 ; i<=n ; i++)
        {
            if(table[i][j-1] != -1)
            {
                table[i][j] = table[table[i][j-1]][j-1];
            }
        }
    }
}

int LcaQ(int n,int p,int q)
{
    if(level[p] < level[q])
        swap(p,q);
    int Log=1;
    while(1){
        int nxt = Log+1;
        if((1<<nxt) > level[p])
            break;
        Log++;
    }
    for(int i=Log ; i>=0 ; i--){
        if(level[p]-(1<<i) >= level[q])
            p = table[p][i];
    }
    if(p == q)
        return p;
    for(int i=Log ; i>=0 ; i--)
    {
        if(table[p][i]!=-1 && table[p][i]!=table[q][i])
        {
            p=table[p][i];
            q=table[q][i];
        }
    }
    return parent[p];
}

int main()
{
    Raihan
    //tst
    {
        cin>>n>>m;
        while(m--)
        {
            ll u,v;
            cin>>u>>v;
            adj[u].pb(v);
            adj[v].pb(u);
        }
        Bfs(1);
        LcaInit(n);
        cin>>q;
        while(q--)
        {
            ll u,v;
            cin>>u>>v;
            cout<<"Lowest common ancestor of "<<u<<" & "<<v<<" = "<<LcaQ(n,u,v);
        }
    }

    return 0;
}

